{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MainContainer","styled","div","ScrollableDiv","ImageWrapper","props","item","Modal","trigger","Image","src","previewUrl","rounded","size","Header","title","Content","image","Description","nasaId","center","moment","dateCreated","format","fromNow","longDescription","App","useState","data","setData","useEffect","a","async","axios","get","response","collection","items","map","keyWords","keywords","shortDescription","description_508","description","links","href","nasa_id","date_created","className","Table","celled","striped","Row","HeaderCell","colSpan","Body","key","shortid","generate","Cell","style","verticalAlign","keyWord","Label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ymBAQA,IAAMA,EAAgBC,IAAOC,IAAV,KAIbC,EAAgBF,IAAOC,IAAV,KAKbE,EAAe,SAACC,GAAW,IACvBC,EAASD,EAATC,KACR,OACE,kBAACC,EAAA,EAAD,CAAOC,QAAS,kBAACC,EAAA,EAAD,CAAOC,IAAKJ,EAAKK,WAAYC,SAAO,EAACC,KAAK,WAC1D,kBAACN,EAAA,EAAMO,OAAP,KAAeR,EAAKS,OACpB,kBAACR,EAAA,EAAMS,QAAP,CAAeC,OAAK,GAClB,kBAACR,EAAA,EAAD,CAAOI,KAAK,QAAQD,SAAO,EAACF,IAAKJ,EAAKK,aACtC,kBAACJ,EAAA,EAAMW,YAAP,KACE,kBAACJ,EAAA,EAAD,WACA,2BAAKR,EAAKa,QACV,kBAACL,EAAA,EAAD,eACA,2BAAKR,EAAKc,QACV,kBAACN,EAAA,EAAD,qBACA,2BAAKO,IAAOf,EAAKgB,aAAaC,OAAO,aAArC,YAAiEF,IAAOf,EAAKgB,aAAaE,UAA1F,KACA,kBAACV,EAAA,EAAD,oBACA,kBAACX,EAAD,KACE,2BACGG,EAAKmB,sBA+DHC,EAtDH,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACTC,EADS,KACHC,EADG,KAqBhB,OAnBAC,qBAAU,YACR,WAAC,UAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACwBE,IAAMC,IAAI,gDADlC,OACOC,EADP,OAEOP,EAAOO,EAASP,KAAKQ,WAAWC,MAAMC,KAAI,SAAAhC,GAAI,MAClD,CACES,MAAOT,EAAKsB,KAAK,GAAGb,MACpBwB,SAAUjC,EAAKsB,KAAK,GAAGY,SACvBC,iBAAkBnC,EAAKsB,KAAK,GAAGc,gBAC/BjB,gBAAiBnB,EAAKsB,KAAK,GAAGe,YAC9BhC,WAAYL,EAAKsC,MAAM,IAAMtC,EAAKsC,MAAM,GAAGC,KAC3CzB,OAAQd,EAAKsB,KAAK,GAAGR,OACrBD,OAAQb,EAAKsB,KAAK,GAAGkB,QACrBxB,YAAahB,EAAKsB,KAAK,GAAGmB,iBAG9BlB,EAAQD,GAdT,qCAAD,KAgBC,IAGD,yBAAKoB,UAAU,OACb,kBAAChD,EAAD,KACE,kBAACiD,EAAA,EAAD,CAAOC,QAAM,EAACC,SAAO,GACnB,kBAACF,EAAA,EAAMnC,OAAP,KACE,kBAACmC,EAAA,EAAMG,IAAP,KACE,kBAACH,EAAA,EAAMI,WAAP,CAAkBC,QAAQ,KAA1B,iBAGJ,kBAACL,EAAA,EAAMM,KAAP,KACI3B,EAAKU,KAAI,SAAAhC,GAAI,OACb,kBAAC2C,EAAA,EAAMG,IAAP,CAAWI,IAAKC,IAAQC,YACtB,kBAACT,EAAA,EAAMU,KAAP,CAAYC,MAAO,CAAEC,cAAe,QAClC,kBAAC,EAAD,CAAcvD,KAAMA,KAEtB,kBAAC2C,EAAA,EAAMU,KAAP,CAAYC,MAAO,CAAEC,cAAe,QAClC,4BAAMvD,EAAKS,OACTT,EAAKiC,UAAYjC,EAAKiC,SAASD,KAAI,SAAAwB,GAAO,OAC1C,kBAACC,EAAA,EAAD,CAAOP,IAAKC,IAAQC,YAAcI,MAEpC,6BACA,6BACA,+BAAMxD,EAAKmC,4BC1ETuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ef3f482b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport shortid from 'shortid'\nimport axios from 'axios'\nimport moment from 'moment'\nimport { Button, Header, Image, Label, Modal, Table } from 'semantic-ui-react'\nimport './App.css';\n\nconst MainContainer = styled.div`\n  padding: 3rem;\n`\n\nconst ScrollableDiv = styled.div`\n  max-height: 200px;\n  overflow-y: auto;\n`\n\nconst ImageWrapper = (props) => {\n  const { item } = props\n  return (\n    <Modal trigger={<Image src={item.previewUrl} rounded size='small'></Image>}>\n    <Modal.Header>{item.title}</Modal.Header>\n    <Modal.Content image>\n      <Image size='large' rounded src={item.previewUrl} />\n      <Modal.Description>\n        <Header>ID</Header>\n        <p>{ item.nasaId }</p>\n        <Header>Source</Header>\n        <p>{ item.center }</p>\n        <Header>Date created</Header>\n        <p>{ moment(item.dateCreated).format(\"M/DD/YYYY\") }&nbsp;&nbsp;({moment(item.dateCreated).fromNow()})</p>\n        <Header>Description</Header>\n        <ScrollableDiv>\n          <p>\n            {item.longDescription}\n          </p>\n        </ScrollableDiv>\n      </Modal.Description>\n    </Modal.Content>\n  </Modal>\n  )\n}\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    (async () => {\n      const response = await axios.get('https://images-assets.nasa.gov/popular.json')\n      const data = response.data.collection.items.map(item => (\n        {\n          title: item.data[0].title,\n          keyWords: item.data[0].keywords,\n          shortDescription: item.data[0].description_508,\n          longDescription: item.data[0].description,\n          previewUrl: item.links[0] && item.links[0].href,\n          center: item.data[0].center,\n          nasaId: item.data[0].nasa_id,\n          dateCreated: item.data[0].date_created\n        }\n      ))\n      setData(data)\n    })();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <MainContainer>\n        <Table celled striped>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell colSpan='2'>NASA Images</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            { data.map(item => (\n              <Table.Row key={shortid.generate()}>\n                <Table.Cell style={{ verticalAlign: 'top' }}>\n                  <ImageWrapper item={item}></ImageWrapper>\n                </Table.Cell>\n                <Table.Cell style={{ verticalAlign: 'top' }}>\n                  <h3>{ item.title }</h3>\n                  { item.keyWords && item.keyWords.map(keyWord => (\n                    <Label key={shortid.generate()}>{ keyWord }</Label>\n                  )) }\n                  <br/>\n                  <br/>\n                  <p> { item.shortDescription }</p>\n                </Table.Cell>\n              </Table.Row>\n            )) }\n          </Table.Body>\n        </Table>\n      </MainContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}